// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: WorldStatusUpdate.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "WorldStatusUpdate.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace strategy_protocol {

namespace {

const ::google::protobuf::Descriptor* WorldStatusUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WorldStatusUpdate_reflection_ = NULL;
const ::google::protobuf::Descriptor* WorldStatusUpdate_CommonProperties_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WorldStatusUpdate_CommonProperties_reflection_ = NULL;
const ::google::protobuf::Descriptor* WorldStatusUpdate_Base_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WorldStatusUpdate_Base_reflection_ = NULL;
const ::google::protobuf::Descriptor* WorldStatusUpdate_Mine_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WorldStatusUpdate_Mine_reflection_ = NULL;
const ::google::protobuf::Descriptor* WorldStatusUpdate_Obstacle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WorldStatusUpdate_Obstacle_reflection_ = NULL;
const ::google::protobuf::Descriptor* WorldStatusUpdate_Worker_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WorldStatusUpdate_Worker_reflection_ = NULL;
const ::google::protobuf::Descriptor* WorldStatusUpdate_Soldier_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WorldStatusUpdate_Soldier_reflection_ = NULL;
const ::google::protobuf::Descriptor* WorldStatusUpdate_Boss_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WorldStatusUpdate_Boss_reflection_ = NULL;
const ::google::protobuf::Descriptor* WorldStatusUpdate_Minion_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WorldStatusUpdate_Minion_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_WorldStatusUpdate_2eproto() {
  protobuf_AddDesc_WorldStatusUpdate_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "WorldStatusUpdate.proto");
  GOOGLE_CHECK(file != NULL);
  WorldStatusUpdate_descriptor_ = file->message_type(0);
  static const int WorldStatusUpdate_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldStatusUpdate, bases_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldStatusUpdate, mines_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldStatusUpdate, obstacles_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldStatusUpdate, workers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldStatusUpdate, soldiers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldStatusUpdate, bosses_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldStatusUpdate, minions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldStatusUpdate, resource_),
  };
  WorldStatusUpdate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WorldStatusUpdate_descriptor_,
      WorldStatusUpdate::default_instance_,
      WorldStatusUpdate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldStatusUpdate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldStatusUpdate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WorldStatusUpdate));
  WorldStatusUpdate_CommonProperties_descriptor_ = WorldStatusUpdate_descriptor_->nested_type(0);
  static const int WorldStatusUpdate_CommonProperties_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldStatusUpdate_CommonProperties, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldStatusUpdate_CommonProperties, position_),
  };
  WorldStatusUpdate_CommonProperties_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WorldStatusUpdate_CommonProperties_descriptor_,
      WorldStatusUpdate_CommonProperties::default_instance_,
      WorldStatusUpdate_CommonProperties_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldStatusUpdate_CommonProperties, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldStatusUpdate_CommonProperties, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WorldStatusUpdate_CommonProperties));
  WorldStatusUpdate_Base_descriptor_ = WorldStatusUpdate_descriptor_->nested_type(1);
  static const int WorldStatusUpdate_Base_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldStatusUpdate_Base, common_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldStatusUpdate_Base, health_),
  };
  WorldStatusUpdate_Base_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WorldStatusUpdate_Base_descriptor_,
      WorldStatusUpdate_Base::default_instance_,
      WorldStatusUpdate_Base_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldStatusUpdate_Base, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldStatusUpdate_Base, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WorldStatusUpdate_Base));
  WorldStatusUpdate_Mine_descriptor_ = WorldStatusUpdate_descriptor_->nested_type(2);
  static const int WorldStatusUpdate_Mine_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldStatusUpdate_Mine, common_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldStatusUpdate_Mine, capacity_),
  };
  WorldStatusUpdate_Mine_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WorldStatusUpdate_Mine_descriptor_,
      WorldStatusUpdate_Mine::default_instance_,
      WorldStatusUpdate_Mine_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldStatusUpdate_Mine, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldStatusUpdate_Mine, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WorldStatusUpdate_Mine));
  WorldStatusUpdate_Obstacle_descriptor_ = WorldStatusUpdate_descriptor_->nested_type(3);
  static const int WorldStatusUpdate_Obstacle_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldStatusUpdate_Obstacle, common_),
  };
  WorldStatusUpdate_Obstacle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WorldStatusUpdate_Obstacle_descriptor_,
      WorldStatusUpdate_Obstacle::default_instance_,
      WorldStatusUpdate_Obstacle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldStatusUpdate_Obstacle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldStatusUpdate_Obstacle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WorldStatusUpdate_Obstacle));
  WorldStatusUpdate_Worker_descriptor_ = WorldStatusUpdate_descriptor_->nested_type(4);
  static const int WorldStatusUpdate_Worker_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldStatusUpdate_Worker, common_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldStatusUpdate_Worker, resource_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldStatusUpdate_Worker, health_),
  };
  WorldStatusUpdate_Worker_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WorldStatusUpdate_Worker_descriptor_,
      WorldStatusUpdate_Worker::default_instance_,
      WorldStatusUpdate_Worker_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldStatusUpdate_Worker, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldStatusUpdate_Worker, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WorldStatusUpdate_Worker));
  WorldStatusUpdate_Soldier_descriptor_ = WorldStatusUpdate_descriptor_->nested_type(5);
  static const int WorldStatusUpdate_Soldier_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldStatusUpdate_Soldier, common_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldStatusUpdate_Soldier, health_),
  };
  WorldStatusUpdate_Soldier_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WorldStatusUpdate_Soldier_descriptor_,
      WorldStatusUpdate_Soldier::default_instance_,
      WorldStatusUpdate_Soldier_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldStatusUpdate_Soldier, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldStatusUpdate_Soldier, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WorldStatusUpdate_Soldier));
  WorldStatusUpdate_Boss_descriptor_ = WorldStatusUpdate_descriptor_->nested_type(6);
  static const int WorldStatusUpdate_Boss_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldStatusUpdate_Boss, common_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldStatusUpdate_Boss, health_),
  };
  WorldStatusUpdate_Boss_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WorldStatusUpdate_Boss_descriptor_,
      WorldStatusUpdate_Boss::default_instance_,
      WorldStatusUpdate_Boss_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldStatusUpdate_Boss, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldStatusUpdate_Boss, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WorldStatusUpdate_Boss));
  WorldStatusUpdate_Minion_descriptor_ = WorldStatusUpdate_descriptor_->nested_type(7);
  static const int WorldStatusUpdate_Minion_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldStatusUpdate_Minion, common_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldStatusUpdate_Minion, health_),
  };
  WorldStatusUpdate_Minion_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WorldStatusUpdate_Minion_descriptor_,
      WorldStatusUpdate_Minion::default_instance_,
      WorldStatusUpdate_Minion_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldStatusUpdate_Minion, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldStatusUpdate_Minion, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WorldStatusUpdate_Minion));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_WorldStatusUpdate_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WorldStatusUpdate_descriptor_, &WorldStatusUpdate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WorldStatusUpdate_CommonProperties_descriptor_, &WorldStatusUpdate_CommonProperties::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WorldStatusUpdate_Base_descriptor_, &WorldStatusUpdate_Base::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WorldStatusUpdate_Mine_descriptor_, &WorldStatusUpdate_Mine::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WorldStatusUpdate_Obstacle_descriptor_, &WorldStatusUpdate_Obstacle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WorldStatusUpdate_Worker_descriptor_, &WorldStatusUpdate_Worker::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WorldStatusUpdate_Soldier_descriptor_, &WorldStatusUpdate_Soldier::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WorldStatusUpdate_Boss_descriptor_, &WorldStatusUpdate_Boss::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WorldStatusUpdate_Minion_descriptor_, &WorldStatusUpdate_Minion::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_WorldStatusUpdate_2eproto() {
  delete WorldStatusUpdate::default_instance_;
  delete WorldStatusUpdate_reflection_;
  delete WorldStatusUpdate_CommonProperties::default_instance_;
  delete WorldStatusUpdate_CommonProperties_reflection_;
  delete WorldStatusUpdate_Base::default_instance_;
  delete WorldStatusUpdate_Base_reflection_;
  delete WorldStatusUpdate_Mine::default_instance_;
  delete WorldStatusUpdate_Mine_reflection_;
  delete WorldStatusUpdate_Obstacle::default_instance_;
  delete WorldStatusUpdate_Obstacle_reflection_;
  delete WorldStatusUpdate_Worker::default_instance_;
  delete WorldStatusUpdate_Worker_reflection_;
  delete WorldStatusUpdate_Soldier::default_instance_;
  delete WorldStatusUpdate_Soldier_reflection_;
  delete WorldStatusUpdate_Boss::default_instance_;
  delete WorldStatusUpdate_Boss_reflection_;
  delete WorldStatusUpdate_Minion::default_instance_;
  delete WorldStatusUpdate_Minion_reflection_;
}

void protobuf_AddDesc_WorldStatusUpdate_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::strategy_protocol::protobuf_AddDesc_Common_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\027WorldStatusUpdate.proto\022\021strategy_prot"
    "ocol\032\014Common.proto\"\311\t\n\021WorldStatusUpdate"
    "\0228\n\005bases\030\001 \003(\0132).strategy_protocol.Worl"
    "dStatusUpdate.Base\0228\n\005mines\030\002 \003(\0132).stra"
    "tegy_protocol.WorldStatusUpdate.Mine\022@\n\t"
    "obstacles\030\003 \003(\0132-.strategy_protocol.Worl"
    "dStatusUpdate.Obstacle\022<\n\007workers\030\004 \003(\0132"
    "+.strategy_protocol.WorldStatusUpdate.Wo"
    "rker\022>\n\010soldiers\030\005 \003(\0132,.strategy_protoc"
    "ol.WorldStatusUpdate.Soldier\0229\n\006bosses\030\006"
    " \003(\0132).strategy_protocol.WorldStatusUpda"
    "te.Boss\022<\n\007minions\030\007 \003(\0132+.strategy_prot"
    "ocol.WorldStatusUpdate.Minion\022\020\n\010resourc"
    "e\030\010 \001(\005\032M\n\020CommonProperties\022\n\n\002id\030\001 \001(\t\022"
    "-\n\010position\030\002 \001(\0132\033.strategy_protocol.Po"
    "sition\032]\n\004Base\022E\n\006common\030\001 \001(\01325.strateg"
    "y_protocol.WorldStatusUpdate.CommonPrope"
    "rties\022\016\n\006health\030\002 \001(\005\032_\n\004Mine\022E\n\006common\030"
    "\001 \001(\01325.strategy_protocol.WorldStatusUpd"
    "ate.CommonProperties\022\020\n\010capacity\030\002 \001(\005\032Q"
    "\n\010Obstacle\022E\n\006common\030\001 \001(\01325.strategy_pr"
    "otocol.WorldStatusUpdate.CommonPropertie"
    "s\032q\n\006Worker\022E\n\006common\030\001 \001(\01325.strategy_p"
    "rotocol.WorldStatusUpdate.CommonProperti"
    "es\022\020\n\010resource\030\002 \001(\005\022\016\n\006health\030\003 \001(\005\032`\n\007"
    "Soldier\022E\n\006common\030\001 \001(\01325.strategy_proto"
    "col.WorldStatusUpdate.CommonProperties\022\016"
    "\n\006health\030\002 \001(\005\032]\n\004Boss\022E\n\006common\030\001 \001(\01325"
    ".strategy_protocol.WorldStatusUpdate.Com"
    "monProperties\022\016\n\006health\030\002 \001(\005\032_\n\006Minion\022"
    "E\n\006common\030\001 \001(\01325.strategy_protocol.Worl"
    "dStatusUpdate.CommonProperties\022\016\n\006health"
    "\030\002 \001(\005", 1286);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "WorldStatusUpdate.proto", &protobuf_RegisterTypes);
  WorldStatusUpdate::default_instance_ = new WorldStatusUpdate();
  WorldStatusUpdate_CommonProperties::default_instance_ = new WorldStatusUpdate_CommonProperties();
  WorldStatusUpdate_Base::default_instance_ = new WorldStatusUpdate_Base();
  WorldStatusUpdate_Mine::default_instance_ = new WorldStatusUpdate_Mine();
  WorldStatusUpdate_Obstacle::default_instance_ = new WorldStatusUpdate_Obstacle();
  WorldStatusUpdate_Worker::default_instance_ = new WorldStatusUpdate_Worker();
  WorldStatusUpdate_Soldier::default_instance_ = new WorldStatusUpdate_Soldier();
  WorldStatusUpdate_Boss::default_instance_ = new WorldStatusUpdate_Boss();
  WorldStatusUpdate_Minion::default_instance_ = new WorldStatusUpdate_Minion();
  WorldStatusUpdate::default_instance_->InitAsDefaultInstance();
  WorldStatusUpdate_CommonProperties::default_instance_->InitAsDefaultInstance();
  WorldStatusUpdate_Base::default_instance_->InitAsDefaultInstance();
  WorldStatusUpdate_Mine::default_instance_->InitAsDefaultInstance();
  WorldStatusUpdate_Obstacle::default_instance_->InitAsDefaultInstance();
  WorldStatusUpdate_Worker::default_instance_->InitAsDefaultInstance();
  WorldStatusUpdate_Soldier::default_instance_->InitAsDefaultInstance();
  WorldStatusUpdate_Boss::default_instance_->InitAsDefaultInstance();
  WorldStatusUpdate_Minion::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_WorldStatusUpdate_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_WorldStatusUpdate_2eproto {
  StaticDescriptorInitializer_WorldStatusUpdate_2eproto() {
    protobuf_AddDesc_WorldStatusUpdate_2eproto();
  }
} static_descriptor_initializer_WorldStatusUpdate_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int WorldStatusUpdate_CommonProperties::kIdFieldNumber;
const int WorldStatusUpdate_CommonProperties::kPositionFieldNumber;
#endif  // !_MSC_VER

WorldStatusUpdate_CommonProperties::WorldStatusUpdate_CommonProperties()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WorldStatusUpdate_CommonProperties::InitAsDefaultInstance() {
  position_ = const_cast< ::strategy_protocol::Position*>(&::strategy_protocol::Position::default_instance());
}

WorldStatusUpdate_CommonProperties::WorldStatusUpdate_CommonProperties(const WorldStatusUpdate_CommonProperties& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WorldStatusUpdate_CommonProperties::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  position_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WorldStatusUpdate_CommonProperties::~WorldStatusUpdate_CommonProperties() {
  SharedDtor();
}

void WorldStatusUpdate_CommonProperties::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (this != default_instance_) {
    delete position_;
  }
}

void WorldStatusUpdate_CommonProperties::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WorldStatusUpdate_CommonProperties::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WorldStatusUpdate_CommonProperties_descriptor_;
}

const WorldStatusUpdate_CommonProperties& WorldStatusUpdate_CommonProperties::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WorldStatusUpdate_2eproto();
  return *default_instance_;
}

WorldStatusUpdate_CommonProperties* WorldStatusUpdate_CommonProperties::default_instance_ = NULL;

WorldStatusUpdate_CommonProperties* WorldStatusUpdate_CommonProperties::New() const {
  return new WorldStatusUpdate_CommonProperties;
}

void WorldStatusUpdate_CommonProperties::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
    if (has_position()) {
      if (position_ != NULL) position_->::strategy_protocol::Position::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WorldStatusUpdate_CommonProperties::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_position;
        break;
      }

      // optional .strategy_protocol.Position position = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WorldStatusUpdate_CommonProperties::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->id(), output);
  }

  // optional .strategy_protocol.Position position = 2;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->position(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WorldStatusUpdate_CommonProperties::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // optional .strategy_protocol.Position position = 2;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->position(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WorldStatusUpdate_CommonProperties::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional .strategy_protocol.Position position = 2;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->position());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorldStatusUpdate_CommonProperties::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WorldStatusUpdate_CommonProperties* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WorldStatusUpdate_CommonProperties*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WorldStatusUpdate_CommonProperties::MergeFrom(const WorldStatusUpdate_CommonProperties& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_position()) {
      mutable_position()->::strategy_protocol::Position::MergeFrom(from.position());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WorldStatusUpdate_CommonProperties::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorldStatusUpdate_CommonProperties::CopyFrom(const WorldStatusUpdate_CommonProperties& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorldStatusUpdate_CommonProperties::IsInitialized() const {

  if (has_position()) {
    if (!this->position().IsInitialized()) return false;
  }
  return true;
}

void WorldStatusUpdate_CommonProperties::Swap(WorldStatusUpdate_CommonProperties* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(position_, other->position_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WorldStatusUpdate_CommonProperties::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WorldStatusUpdate_CommonProperties_descriptor_;
  metadata.reflection = WorldStatusUpdate_CommonProperties_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int WorldStatusUpdate_Base::kCommonFieldNumber;
const int WorldStatusUpdate_Base::kHealthFieldNumber;
#endif  // !_MSC_VER

WorldStatusUpdate_Base::WorldStatusUpdate_Base()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WorldStatusUpdate_Base::InitAsDefaultInstance() {
  common_ = const_cast< ::strategy_protocol::WorldStatusUpdate_CommonProperties*>(&::strategy_protocol::WorldStatusUpdate_CommonProperties::default_instance());
}

WorldStatusUpdate_Base::WorldStatusUpdate_Base(const WorldStatusUpdate_Base& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WorldStatusUpdate_Base::SharedCtor() {
  _cached_size_ = 0;
  common_ = NULL;
  health_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WorldStatusUpdate_Base::~WorldStatusUpdate_Base() {
  SharedDtor();
}

void WorldStatusUpdate_Base::SharedDtor() {
  if (this != default_instance_) {
    delete common_;
  }
}

void WorldStatusUpdate_Base::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WorldStatusUpdate_Base::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WorldStatusUpdate_Base_descriptor_;
}

const WorldStatusUpdate_Base& WorldStatusUpdate_Base::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WorldStatusUpdate_2eproto();
  return *default_instance_;
}

WorldStatusUpdate_Base* WorldStatusUpdate_Base::default_instance_ = NULL;

WorldStatusUpdate_Base* WorldStatusUpdate_Base::New() const {
  return new WorldStatusUpdate_Base;
}

void WorldStatusUpdate_Base::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_common()) {
      if (common_ != NULL) common_->::strategy_protocol::WorldStatusUpdate_CommonProperties::Clear();
    }
    health_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WorldStatusUpdate_Base::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .strategy_protocol.WorldStatusUpdate.CommonProperties common = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_common()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_health;
        break;
      }

      // optional int32 health = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_health:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &health_)));
          set_has_health();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WorldStatusUpdate_Base::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .strategy_protocol.WorldStatusUpdate.CommonProperties common = 1;
  if (has_common()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->common(), output);
  }

  // optional int32 health = 2;
  if (has_health()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->health(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WorldStatusUpdate_Base::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .strategy_protocol.WorldStatusUpdate.CommonProperties common = 1;
  if (has_common()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->common(), target);
  }

  // optional int32 health = 2;
  if (has_health()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->health(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WorldStatusUpdate_Base::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .strategy_protocol.WorldStatusUpdate.CommonProperties common = 1;
    if (has_common()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->common());
    }

    // optional int32 health = 2;
    if (has_health()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->health());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorldStatusUpdate_Base::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WorldStatusUpdate_Base* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WorldStatusUpdate_Base*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WorldStatusUpdate_Base::MergeFrom(const WorldStatusUpdate_Base& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_common()) {
      mutable_common()->::strategy_protocol::WorldStatusUpdate_CommonProperties::MergeFrom(from.common());
    }
    if (from.has_health()) {
      set_health(from.health());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WorldStatusUpdate_Base::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorldStatusUpdate_Base::CopyFrom(const WorldStatusUpdate_Base& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorldStatusUpdate_Base::IsInitialized() const {

  if (has_common()) {
    if (!this->common().IsInitialized()) return false;
  }
  return true;
}

void WorldStatusUpdate_Base::Swap(WorldStatusUpdate_Base* other) {
  if (other != this) {
    std::swap(common_, other->common_);
    std::swap(health_, other->health_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WorldStatusUpdate_Base::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WorldStatusUpdate_Base_descriptor_;
  metadata.reflection = WorldStatusUpdate_Base_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int WorldStatusUpdate_Mine::kCommonFieldNumber;
const int WorldStatusUpdate_Mine::kCapacityFieldNumber;
#endif  // !_MSC_VER

WorldStatusUpdate_Mine::WorldStatusUpdate_Mine()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WorldStatusUpdate_Mine::InitAsDefaultInstance() {
  common_ = const_cast< ::strategy_protocol::WorldStatusUpdate_CommonProperties*>(&::strategy_protocol::WorldStatusUpdate_CommonProperties::default_instance());
}

WorldStatusUpdate_Mine::WorldStatusUpdate_Mine(const WorldStatusUpdate_Mine& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WorldStatusUpdate_Mine::SharedCtor() {
  _cached_size_ = 0;
  common_ = NULL;
  capacity_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WorldStatusUpdate_Mine::~WorldStatusUpdate_Mine() {
  SharedDtor();
}

void WorldStatusUpdate_Mine::SharedDtor() {
  if (this != default_instance_) {
    delete common_;
  }
}

void WorldStatusUpdate_Mine::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WorldStatusUpdate_Mine::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WorldStatusUpdate_Mine_descriptor_;
}

const WorldStatusUpdate_Mine& WorldStatusUpdate_Mine::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WorldStatusUpdate_2eproto();
  return *default_instance_;
}

WorldStatusUpdate_Mine* WorldStatusUpdate_Mine::default_instance_ = NULL;

WorldStatusUpdate_Mine* WorldStatusUpdate_Mine::New() const {
  return new WorldStatusUpdate_Mine;
}

void WorldStatusUpdate_Mine::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_common()) {
      if (common_ != NULL) common_->::strategy_protocol::WorldStatusUpdate_CommonProperties::Clear();
    }
    capacity_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WorldStatusUpdate_Mine::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .strategy_protocol.WorldStatusUpdate.CommonProperties common = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_common()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_capacity;
        break;
      }

      // optional int32 capacity = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_capacity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &capacity_)));
          set_has_capacity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WorldStatusUpdate_Mine::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .strategy_protocol.WorldStatusUpdate.CommonProperties common = 1;
  if (has_common()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->common(), output);
  }

  // optional int32 capacity = 2;
  if (has_capacity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->capacity(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WorldStatusUpdate_Mine::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .strategy_protocol.WorldStatusUpdate.CommonProperties common = 1;
  if (has_common()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->common(), target);
  }

  // optional int32 capacity = 2;
  if (has_capacity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->capacity(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WorldStatusUpdate_Mine::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .strategy_protocol.WorldStatusUpdate.CommonProperties common = 1;
    if (has_common()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->common());
    }

    // optional int32 capacity = 2;
    if (has_capacity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->capacity());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorldStatusUpdate_Mine::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WorldStatusUpdate_Mine* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WorldStatusUpdate_Mine*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WorldStatusUpdate_Mine::MergeFrom(const WorldStatusUpdate_Mine& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_common()) {
      mutable_common()->::strategy_protocol::WorldStatusUpdate_CommonProperties::MergeFrom(from.common());
    }
    if (from.has_capacity()) {
      set_capacity(from.capacity());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WorldStatusUpdate_Mine::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorldStatusUpdate_Mine::CopyFrom(const WorldStatusUpdate_Mine& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorldStatusUpdate_Mine::IsInitialized() const {

  if (has_common()) {
    if (!this->common().IsInitialized()) return false;
  }
  return true;
}

void WorldStatusUpdate_Mine::Swap(WorldStatusUpdate_Mine* other) {
  if (other != this) {
    std::swap(common_, other->common_);
    std::swap(capacity_, other->capacity_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WorldStatusUpdate_Mine::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WorldStatusUpdate_Mine_descriptor_;
  metadata.reflection = WorldStatusUpdate_Mine_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int WorldStatusUpdate_Obstacle::kCommonFieldNumber;
#endif  // !_MSC_VER

WorldStatusUpdate_Obstacle::WorldStatusUpdate_Obstacle()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WorldStatusUpdate_Obstacle::InitAsDefaultInstance() {
  common_ = const_cast< ::strategy_protocol::WorldStatusUpdate_CommonProperties*>(&::strategy_protocol::WorldStatusUpdate_CommonProperties::default_instance());
}

WorldStatusUpdate_Obstacle::WorldStatusUpdate_Obstacle(const WorldStatusUpdate_Obstacle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WorldStatusUpdate_Obstacle::SharedCtor() {
  _cached_size_ = 0;
  common_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WorldStatusUpdate_Obstacle::~WorldStatusUpdate_Obstacle() {
  SharedDtor();
}

void WorldStatusUpdate_Obstacle::SharedDtor() {
  if (this != default_instance_) {
    delete common_;
  }
}

void WorldStatusUpdate_Obstacle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WorldStatusUpdate_Obstacle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WorldStatusUpdate_Obstacle_descriptor_;
}

const WorldStatusUpdate_Obstacle& WorldStatusUpdate_Obstacle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WorldStatusUpdate_2eproto();
  return *default_instance_;
}

WorldStatusUpdate_Obstacle* WorldStatusUpdate_Obstacle::default_instance_ = NULL;

WorldStatusUpdate_Obstacle* WorldStatusUpdate_Obstacle::New() const {
  return new WorldStatusUpdate_Obstacle;
}

void WorldStatusUpdate_Obstacle::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_common()) {
      if (common_ != NULL) common_->::strategy_protocol::WorldStatusUpdate_CommonProperties::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WorldStatusUpdate_Obstacle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .strategy_protocol.WorldStatusUpdate.CommonProperties common = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_common()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WorldStatusUpdate_Obstacle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .strategy_protocol.WorldStatusUpdate.CommonProperties common = 1;
  if (has_common()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->common(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WorldStatusUpdate_Obstacle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .strategy_protocol.WorldStatusUpdate.CommonProperties common = 1;
  if (has_common()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->common(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WorldStatusUpdate_Obstacle::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .strategy_protocol.WorldStatusUpdate.CommonProperties common = 1;
    if (has_common()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->common());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorldStatusUpdate_Obstacle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WorldStatusUpdate_Obstacle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WorldStatusUpdate_Obstacle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WorldStatusUpdate_Obstacle::MergeFrom(const WorldStatusUpdate_Obstacle& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_common()) {
      mutable_common()->::strategy_protocol::WorldStatusUpdate_CommonProperties::MergeFrom(from.common());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WorldStatusUpdate_Obstacle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorldStatusUpdate_Obstacle::CopyFrom(const WorldStatusUpdate_Obstacle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorldStatusUpdate_Obstacle::IsInitialized() const {

  if (has_common()) {
    if (!this->common().IsInitialized()) return false;
  }
  return true;
}

void WorldStatusUpdate_Obstacle::Swap(WorldStatusUpdate_Obstacle* other) {
  if (other != this) {
    std::swap(common_, other->common_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WorldStatusUpdate_Obstacle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WorldStatusUpdate_Obstacle_descriptor_;
  metadata.reflection = WorldStatusUpdate_Obstacle_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int WorldStatusUpdate_Worker::kCommonFieldNumber;
const int WorldStatusUpdate_Worker::kResourceFieldNumber;
const int WorldStatusUpdate_Worker::kHealthFieldNumber;
#endif  // !_MSC_VER

WorldStatusUpdate_Worker::WorldStatusUpdate_Worker()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WorldStatusUpdate_Worker::InitAsDefaultInstance() {
  common_ = const_cast< ::strategy_protocol::WorldStatusUpdate_CommonProperties*>(&::strategy_protocol::WorldStatusUpdate_CommonProperties::default_instance());
}

WorldStatusUpdate_Worker::WorldStatusUpdate_Worker(const WorldStatusUpdate_Worker& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WorldStatusUpdate_Worker::SharedCtor() {
  _cached_size_ = 0;
  common_ = NULL;
  resource_ = 0;
  health_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WorldStatusUpdate_Worker::~WorldStatusUpdate_Worker() {
  SharedDtor();
}

void WorldStatusUpdate_Worker::SharedDtor() {
  if (this != default_instance_) {
    delete common_;
  }
}

void WorldStatusUpdate_Worker::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WorldStatusUpdate_Worker::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WorldStatusUpdate_Worker_descriptor_;
}

const WorldStatusUpdate_Worker& WorldStatusUpdate_Worker::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WorldStatusUpdate_2eproto();
  return *default_instance_;
}

WorldStatusUpdate_Worker* WorldStatusUpdate_Worker::default_instance_ = NULL;

WorldStatusUpdate_Worker* WorldStatusUpdate_Worker::New() const {
  return new WorldStatusUpdate_Worker;
}

void WorldStatusUpdate_Worker::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_common()) {
      if (common_ != NULL) common_->::strategy_protocol::WorldStatusUpdate_CommonProperties::Clear();
    }
    resource_ = 0;
    health_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WorldStatusUpdate_Worker::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .strategy_protocol.WorldStatusUpdate.CommonProperties common = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_common()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_resource;
        break;
      }

      // optional int32 resource = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_resource:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &resource_)));
          set_has_resource();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_health;
        break;
      }

      // optional int32 health = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_health:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &health_)));
          set_has_health();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WorldStatusUpdate_Worker::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .strategy_protocol.WorldStatusUpdate.CommonProperties common = 1;
  if (has_common()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->common(), output);
  }

  // optional int32 resource = 2;
  if (has_resource()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->resource(), output);
  }

  // optional int32 health = 3;
  if (has_health()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->health(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WorldStatusUpdate_Worker::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .strategy_protocol.WorldStatusUpdate.CommonProperties common = 1;
  if (has_common()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->common(), target);
  }

  // optional int32 resource = 2;
  if (has_resource()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->resource(), target);
  }

  // optional int32 health = 3;
  if (has_health()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->health(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WorldStatusUpdate_Worker::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .strategy_protocol.WorldStatusUpdate.CommonProperties common = 1;
    if (has_common()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->common());
    }

    // optional int32 resource = 2;
    if (has_resource()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->resource());
    }

    // optional int32 health = 3;
    if (has_health()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->health());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorldStatusUpdate_Worker::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WorldStatusUpdate_Worker* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WorldStatusUpdate_Worker*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WorldStatusUpdate_Worker::MergeFrom(const WorldStatusUpdate_Worker& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_common()) {
      mutable_common()->::strategy_protocol::WorldStatusUpdate_CommonProperties::MergeFrom(from.common());
    }
    if (from.has_resource()) {
      set_resource(from.resource());
    }
    if (from.has_health()) {
      set_health(from.health());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WorldStatusUpdate_Worker::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorldStatusUpdate_Worker::CopyFrom(const WorldStatusUpdate_Worker& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorldStatusUpdate_Worker::IsInitialized() const {

  if (has_common()) {
    if (!this->common().IsInitialized()) return false;
  }
  return true;
}

void WorldStatusUpdate_Worker::Swap(WorldStatusUpdate_Worker* other) {
  if (other != this) {
    std::swap(common_, other->common_);
    std::swap(resource_, other->resource_);
    std::swap(health_, other->health_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WorldStatusUpdate_Worker::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WorldStatusUpdate_Worker_descriptor_;
  metadata.reflection = WorldStatusUpdate_Worker_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int WorldStatusUpdate_Soldier::kCommonFieldNumber;
const int WorldStatusUpdate_Soldier::kHealthFieldNumber;
#endif  // !_MSC_VER

WorldStatusUpdate_Soldier::WorldStatusUpdate_Soldier()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WorldStatusUpdate_Soldier::InitAsDefaultInstance() {
  common_ = const_cast< ::strategy_protocol::WorldStatusUpdate_CommonProperties*>(&::strategy_protocol::WorldStatusUpdate_CommonProperties::default_instance());
}

WorldStatusUpdate_Soldier::WorldStatusUpdate_Soldier(const WorldStatusUpdate_Soldier& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WorldStatusUpdate_Soldier::SharedCtor() {
  _cached_size_ = 0;
  common_ = NULL;
  health_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WorldStatusUpdate_Soldier::~WorldStatusUpdate_Soldier() {
  SharedDtor();
}

void WorldStatusUpdate_Soldier::SharedDtor() {
  if (this != default_instance_) {
    delete common_;
  }
}

void WorldStatusUpdate_Soldier::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WorldStatusUpdate_Soldier::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WorldStatusUpdate_Soldier_descriptor_;
}

const WorldStatusUpdate_Soldier& WorldStatusUpdate_Soldier::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WorldStatusUpdate_2eproto();
  return *default_instance_;
}

WorldStatusUpdate_Soldier* WorldStatusUpdate_Soldier::default_instance_ = NULL;

WorldStatusUpdate_Soldier* WorldStatusUpdate_Soldier::New() const {
  return new WorldStatusUpdate_Soldier;
}

void WorldStatusUpdate_Soldier::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_common()) {
      if (common_ != NULL) common_->::strategy_protocol::WorldStatusUpdate_CommonProperties::Clear();
    }
    health_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WorldStatusUpdate_Soldier::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .strategy_protocol.WorldStatusUpdate.CommonProperties common = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_common()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_health;
        break;
      }

      // optional int32 health = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_health:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &health_)));
          set_has_health();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WorldStatusUpdate_Soldier::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .strategy_protocol.WorldStatusUpdate.CommonProperties common = 1;
  if (has_common()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->common(), output);
  }

  // optional int32 health = 2;
  if (has_health()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->health(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WorldStatusUpdate_Soldier::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .strategy_protocol.WorldStatusUpdate.CommonProperties common = 1;
  if (has_common()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->common(), target);
  }

  // optional int32 health = 2;
  if (has_health()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->health(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WorldStatusUpdate_Soldier::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .strategy_protocol.WorldStatusUpdate.CommonProperties common = 1;
    if (has_common()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->common());
    }

    // optional int32 health = 2;
    if (has_health()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->health());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorldStatusUpdate_Soldier::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WorldStatusUpdate_Soldier* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WorldStatusUpdate_Soldier*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WorldStatusUpdate_Soldier::MergeFrom(const WorldStatusUpdate_Soldier& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_common()) {
      mutable_common()->::strategy_protocol::WorldStatusUpdate_CommonProperties::MergeFrom(from.common());
    }
    if (from.has_health()) {
      set_health(from.health());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WorldStatusUpdate_Soldier::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorldStatusUpdate_Soldier::CopyFrom(const WorldStatusUpdate_Soldier& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorldStatusUpdate_Soldier::IsInitialized() const {

  if (has_common()) {
    if (!this->common().IsInitialized()) return false;
  }
  return true;
}

void WorldStatusUpdate_Soldier::Swap(WorldStatusUpdate_Soldier* other) {
  if (other != this) {
    std::swap(common_, other->common_);
    std::swap(health_, other->health_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WorldStatusUpdate_Soldier::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WorldStatusUpdate_Soldier_descriptor_;
  metadata.reflection = WorldStatusUpdate_Soldier_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int WorldStatusUpdate_Boss::kCommonFieldNumber;
const int WorldStatusUpdate_Boss::kHealthFieldNumber;
#endif  // !_MSC_VER

WorldStatusUpdate_Boss::WorldStatusUpdate_Boss()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WorldStatusUpdate_Boss::InitAsDefaultInstance() {
  common_ = const_cast< ::strategy_protocol::WorldStatusUpdate_CommonProperties*>(&::strategy_protocol::WorldStatusUpdate_CommonProperties::default_instance());
}

WorldStatusUpdate_Boss::WorldStatusUpdate_Boss(const WorldStatusUpdate_Boss& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WorldStatusUpdate_Boss::SharedCtor() {
  _cached_size_ = 0;
  common_ = NULL;
  health_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WorldStatusUpdate_Boss::~WorldStatusUpdate_Boss() {
  SharedDtor();
}

void WorldStatusUpdate_Boss::SharedDtor() {
  if (this != default_instance_) {
    delete common_;
  }
}

void WorldStatusUpdate_Boss::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WorldStatusUpdate_Boss::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WorldStatusUpdate_Boss_descriptor_;
}

const WorldStatusUpdate_Boss& WorldStatusUpdate_Boss::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WorldStatusUpdate_2eproto();
  return *default_instance_;
}

WorldStatusUpdate_Boss* WorldStatusUpdate_Boss::default_instance_ = NULL;

WorldStatusUpdate_Boss* WorldStatusUpdate_Boss::New() const {
  return new WorldStatusUpdate_Boss;
}

void WorldStatusUpdate_Boss::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_common()) {
      if (common_ != NULL) common_->::strategy_protocol::WorldStatusUpdate_CommonProperties::Clear();
    }
    health_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WorldStatusUpdate_Boss::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .strategy_protocol.WorldStatusUpdate.CommonProperties common = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_common()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_health;
        break;
      }

      // optional int32 health = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_health:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &health_)));
          set_has_health();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WorldStatusUpdate_Boss::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .strategy_protocol.WorldStatusUpdate.CommonProperties common = 1;
  if (has_common()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->common(), output);
  }

  // optional int32 health = 2;
  if (has_health()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->health(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WorldStatusUpdate_Boss::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .strategy_protocol.WorldStatusUpdate.CommonProperties common = 1;
  if (has_common()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->common(), target);
  }

  // optional int32 health = 2;
  if (has_health()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->health(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WorldStatusUpdate_Boss::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .strategy_protocol.WorldStatusUpdate.CommonProperties common = 1;
    if (has_common()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->common());
    }

    // optional int32 health = 2;
    if (has_health()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->health());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorldStatusUpdate_Boss::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WorldStatusUpdate_Boss* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WorldStatusUpdate_Boss*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WorldStatusUpdate_Boss::MergeFrom(const WorldStatusUpdate_Boss& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_common()) {
      mutable_common()->::strategy_protocol::WorldStatusUpdate_CommonProperties::MergeFrom(from.common());
    }
    if (from.has_health()) {
      set_health(from.health());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WorldStatusUpdate_Boss::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorldStatusUpdate_Boss::CopyFrom(const WorldStatusUpdate_Boss& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorldStatusUpdate_Boss::IsInitialized() const {

  if (has_common()) {
    if (!this->common().IsInitialized()) return false;
  }
  return true;
}

void WorldStatusUpdate_Boss::Swap(WorldStatusUpdate_Boss* other) {
  if (other != this) {
    std::swap(common_, other->common_);
    std::swap(health_, other->health_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WorldStatusUpdate_Boss::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WorldStatusUpdate_Boss_descriptor_;
  metadata.reflection = WorldStatusUpdate_Boss_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int WorldStatusUpdate_Minion::kCommonFieldNumber;
const int WorldStatusUpdate_Minion::kHealthFieldNumber;
#endif  // !_MSC_VER

WorldStatusUpdate_Minion::WorldStatusUpdate_Minion()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WorldStatusUpdate_Minion::InitAsDefaultInstance() {
  common_ = const_cast< ::strategy_protocol::WorldStatusUpdate_CommonProperties*>(&::strategy_protocol::WorldStatusUpdate_CommonProperties::default_instance());
}

WorldStatusUpdate_Minion::WorldStatusUpdate_Minion(const WorldStatusUpdate_Minion& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WorldStatusUpdate_Minion::SharedCtor() {
  _cached_size_ = 0;
  common_ = NULL;
  health_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WorldStatusUpdate_Minion::~WorldStatusUpdate_Minion() {
  SharedDtor();
}

void WorldStatusUpdate_Minion::SharedDtor() {
  if (this != default_instance_) {
    delete common_;
  }
}

void WorldStatusUpdate_Minion::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WorldStatusUpdate_Minion::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WorldStatusUpdate_Minion_descriptor_;
}

const WorldStatusUpdate_Minion& WorldStatusUpdate_Minion::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WorldStatusUpdate_2eproto();
  return *default_instance_;
}

WorldStatusUpdate_Minion* WorldStatusUpdate_Minion::default_instance_ = NULL;

WorldStatusUpdate_Minion* WorldStatusUpdate_Minion::New() const {
  return new WorldStatusUpdate_Minion;
}

void WorldStatusUpdate_Minion::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_common()) {
      if (common_ != NULL) common_->::strategy_protocol::WorldStatusUpdate_CommonProperties::Clear();
    }
    health_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WorldStatusUpdate_Minion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .strategy_protocol.WorldStatusUpdate.CommonProperties common = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_common()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_health;
        break;
      }

      // optional int32 health = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_health:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &health_)));
          set_has_health();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WorldStatusUpdate_Minion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .strategy_protocol.WorldStatusUpdate.CommonProperties common = 1;
  if (has_common()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->common(), output);
  }

  // optional int32 health = 2;
  if (has_health()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->health(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WorldStatusUpdate_Minion::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .strategy_protocol.WorldStatusUpdate.CommonProperties common = 1;
  if (has_common()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->common(), target);
  }

  // optional int32 health = 2;
  if (has_health()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->health(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WorldStatusUpdate_Minion::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .strategy_protocol.WorldStatusUpdate.CommonProperties common = 1;
    if (has_common()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->common());
    }

    // optional int32 health = 2;
    if (has_health()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->health());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorldStatusUpdate_Minion::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WorldStatusUpdate_Minion* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WorldStatusUpdate_Minion*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WorldStatusUpdate_Minion::MergeFrom(const WorldStatusUpdate_Minion& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_common()) {
      mutable_common()->::strategy_protocol::WorldStatusUpdate_CommonProperties::MergeFrom(from.common());
    }
    if (from.has_health()) {
      set_health(from.health());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WorldStatusUpdate_Minion::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorldStatusUpdate_Minion::CopyFrom(const WorldStatusUpdate_Minion& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorldStatusUpdate_Minion::IsInitialized() const {

  if (has_common()) {
    if (!this->common().IsInitialized()) return false;
  }
  return true;
}

void WorldStatusUpdate_Minion::Swap(WorldStatusUpdate_Minion* other) {
  if (other != this) {
    std::swap(common_, other->common_);
    std::swap(health_, other->health_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WorldStatusUpdate_Minion::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WorldStatusUpdate_Minion_descriptor_;
  metadata.reflection = WorldStatusUpdate_Minion_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int WorldStatusUpdate::kBasesFieldNumber;
const int WorldStatusUpdate::kMinesFieldNumber;
const int WorldStatusUpdate::kObstaclesFieldNumber;
const int WorldStatusUpdate::kWorkersFieldNumber;
const int WorldStatusUpdate::kSoldiersFieldNumber;
const int WorldStatusUpdate::kBossesFieldNumber;
const int WorldStatusUpdate::kMinionsFieldNumber;
const int WorldStatusUpdate::kResourceFieldNumber;
#endif  // !_MSC_VER

WorldStatusUpdate::WorldStatusUpdate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WorldStatusUpdate::InitAsDefaultInstance() {
}

WorldStatusUpdate::WorldStatusUpdate(const WorldStatusUpdate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WorldStatusUpdate::SharedCtor() {
  _cached_size_ = 0;
  resource_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WorldStatusUpdate::~WorldStatusUpdate() {
  SharedDtor();
}

void WorldStatusUpdate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WorldStatusUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WorldStatusUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WorldStatusUpdate_descriptor_;
}

const WorldStatusUpdate& WorldStatusUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WorldStatusUpdate_2eproto();
  return *default_instance_;
}

WorldStatusUpdate* WorldStatusUpdate::default_instance_ = NULL;

WorldStatusUpdate* WorldStatusUpdate::New() const {
  return new WorldStatusUpdate;
}

void WorldStatusUpdate::Clear() {
  if (_has_bits_[7 / 32] & (0xffu << (7 % 32))) {
    resource_ = 0;
  }
  bases_.Clear();
  mines_.Clear();
  obstacles_.Clear();
  workers_.Clear();
  soldiers_.Clear();
  bosses_.Clear();
  minions_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WorldStatusUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .strategy_protocol.WorldStatusUpdate.Base bases = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bases:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bases()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_bases;
        if (input->ExpectTag(18)) goto parse_mines;
        break;
      }

      // repeated .strategy_protocol.WorldStatusUpdate.Mine mines = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mines:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mines()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_mines;
        if (input->ExpectTag(26)) goto parse_obstacles;
        break;
      }

      // repeated .strategy_protocol.WorldStatusUpdate.Obstacle obstacles = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_obstacles:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_obstacles()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_obstacles;
        if (input->ExpectTag(34)) goto parse_workers;
        break;
      }

      // repeated .strategy_protocol.WorldStatusUpdate.Worker workers = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_workers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_workers()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_workers;
        if (input->ExpectTag(42)) goto parse_soldiers;
        break;
      }

      // repeated .strategy_protocol.WorldStatusUpdate.Soldier soldiers = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_soldiers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_soldiers()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_soldiers;
        if (input->ExpectTag(50)) goto parse_bosses;
        break;
      }

      // repeated .strategy_protocol.WorldStatusUpdate.Boss bosses = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bosses:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bosses()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_bosses;
        if (input->ExpectTag(58)) goto parse_minions;
        break;
      }

      // repeated .strategy_protocol.WorldStatusUpdate.Minion minions = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_minions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_minions()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_minions;
        if (input->ExpectTag(64)) goto parse_resource;
        break;
      }

      // optional int32 resource = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_resource:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &resource_)));
          set_has_resource();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WorldStatusUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .strategy_protocol.WorldStatusUpdate.Base bases = 1;
  for (int i = 0; i < this->bases_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->bases(i), output);
  }

  // repeated .strategy_protocol.WorldStatusUpdate.Mine mines = 2;
  for (int i = 0; i < this->mines_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->mines(i), output);
  }

  // repeated .strategy_protocol.WorldStatusUpdate.Obstacle obstacles = 3;
  for (int i = 0; i < this->obstacles_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->obstacles(i), output);
  }

  // repeated .strategy_protocol.WorldStatusUpdate.Worker workers = 4;
  for (int i = 0; i < this->workers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->workers(i), output);
  }

  // repeated .strategy_protocol.WorldStatusUpdate.Soldier soldiers = 5;
  for (int i = 0; i < this->soldiers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->soldiers(i), output);
  }

  // repeated .strategy_protocol.WorldStatusUpdate.Boss bosses = 6;
  for (int i = 0; i < this->bosses_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->bosses(i), output);
  }

  // repeated .strategy_protocol.WorldStatusUpdate.Minion minions = 7;
  for (int i = 0; i < this->minions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->minions(i), output);
  }

  // optional int32 resource = 8;
  if (has_resource()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->resource(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WorldStatusUpdate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .strategy_protocol.WorldStatusUpdate.Base bases = 1;
  for (int i = 0; i < this->bases_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->bases(i), target);
  }

  // repeated .strategy_protocol.WorldStatusUpdate.Mine mines = 2;
  for (int i = 0; i < this->mines_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->mines(i), target);
  }

  // repeated .strategy_protocol.WorldStatusUpdate.Obstacle obstacles = 3;
  for (int i = 0; i < this->obstacles_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->obstacles(i), target);
  }

  // repeated .strategy_protocol.WorldStatusUpdate.Worker workers = 4;
  for (int i = 0; i < this->workers_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->workers(i), target);
  }

  // repeated .strategy_protocol.WorldStatusUpdate.Soldier soldiers = 5;
  for (int i = 0; i < this->soldiers_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->soldiers(i), target);
  }

  // repeated .strategy_protocol.WorldStatusUpdate.Boss bosses = 6;
  for (int i = 0; i < this->bosses_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->bosses(i), target);
  }

  // repeated .strategy_protocol.WorldStatusUpdate.Minion minions = 7;
  for (int i = 0; i < this->minions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->minions(i), target);
  }

  // optional int32 resource = 8;
  if (has_resource()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->resource(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WorldStatusUpdate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[7 / 32] & (0xffu << (7 % 32))) {
    // optional int32 resource = 8;
    if (has_resource()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->resource());
    }

  }
  // repeated .strategy_protocol.WorldStatusUpdate.Base bases = 1;
  total_size += 1 * this->bases_size();
  for (int i = 0; i < this->bases_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bases(i));
  }

  // repeated .strategy_protocol.WorldStatusUpdate.Mine mines = 2;
  total_size += 1 * this->mines_size();
  for (int i = 0; i < this->mines_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mines(i));
  }

  // repeated .strategy_protocol.WorldStatusUpdate.Obstacle obstacles = 3;
  total_size += 1 * this->obstacles_size();
  for (int i = 0; i < this->obstacles_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->obstacles(i));
  }

  // repeated .strategy_protocol.WorldStatusUpdate.Worker workers = 4;
  total_size += 1 * this->workers_size();
  for (int i = 0; i < this->workers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->workers(i));
  }

  // repeated .strategy_protocol.WorldStatusUpdate.Soldier soldiers = 5;
  total_size += 1 * this->soldiers_size();
  for (int i = 0; i < this->soldiers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->soldiers(i));
  }

  // repeated .strategy_protocol.WorldStatusUpdate.Boss bosses = 6;
  total_size += 1 * this->bosses_size();
  for (int i = 0; i < this->bosses_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bosses(i));
  }

  // repeated .strategy_protocol.WorldStatusUpdate.Minion minions = 7;
  total_size += 1 * this->minions_size();
  for (int i = 0; i < this->minions_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->minions(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorldStatusUpdate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WorldStatusUpdate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WorldStatusUpdate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WorldStatusUpdate::MergeFrom(const WorldStatusUpdate& from) {
  GOOGLE_CHECK_NE(&from, this);
  bases_.MergeFrom(from.bases_);
  mines_.MergeFrom(from.mines_);
  obstacles_.MergeFrom(from.obstacles_);
  workers_.MergeFrom(from.workers_);
  soldiers_.MergeFrom(from.soldiers_);
  bosses_.MergeFrom(from.bosses_);
  minions_.MergeFrom(from.minions_);
  if (from._has_bits_[7 / 32] & (0xffu << (7 % 32))) {
    if (from.has_resource()) {
      set_resource(from.resource());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WorldStatusUpdate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorldStatusUpdate::CopyFrom(const WorldStatusUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorldStatusUpdate::IsInitialized() const {

  for (int i = 0; i < bases_size(); i++) {
    if (!this->bases(i).IsInitialized()) return false;
  }
  for (int i = 0; i < mines_size(); i++) {
    if (!this->mines(i).IsInitialized()) return false;
  }
  for (int i = 0; i < obstacles_size(); i++) {
    if (!this->obstacles(i).IsInitialized()) return false;
  }
  for (int i = 0; i < workers_size(); i++) {
    if (!this->workers(i).IsInitialized()) return false;
  }
  for (int i = 0; i < soldiers_size(); i++) {
    if (!this->soldiers(i).IsInitialized()) return false;
  }
  for (int i = 0; i < bosses_size(); i++) {
    if (!this->bosses(i).IsInitialized()) return false;
  }
  for (int i = 0; i < minions_size(); i++) {
    if (!this->minions(i).IsInitialized()) return false;
  }
  return true;
}

void WorldStatusUpdate::Swap(WorldStatusUpdate* other) {
  if (other != this) {
    bases_.Swap(&other->bases_);
    mines_.Swap(&other->mines_);
    obstacles_.Swap(&other->obstacles_);
    workers_.Swap(&other->workers_);
    soldiers_.Swap(&other->soldiers_);
    bosses_.Swap(&other->bosses_);
    minions_.Swap(&other->minions_);
    std::swap(resource_, other->resource_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WorldStatusUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WorldStatusUpdate_descriptor_;
  metadata.reflection = WorldStatusUpdate_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace strategy_protocol

// @@protoc_insertion_point(global_scope)
