// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Commands.proto

#ifndef PROTOBUF_Commands_2eproto__INCLUDED
#define PROTOBUF_Commands_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "Common.pb.h"
// @@protoc_insertion_point(includes)

namespace strategy_protocol {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Commands_2eproto();
void protobuf_AssignDesc_Commands_2eproto();
void protobuf_ShutdownFile_Commands_2eproto();

class Commands;
class Commands_Move;
class Commands_Attack;
class Commands_Train;
class Commands_Command;

enum Commands_ActorType {
  Commands_ActorType_SOLDIER = 0,
  Commands_ActorType_WORKER = 1
};
bool Commands_ActorType_IsValid(int value);
const Commands_ActorType Commands_ActorType_ActorType_MIN = Commands_ActorType_SOLDIER;
const Commands_ActorType Commands_ActorType_ActorType_MAX = Commands_ActorType_WORKER;
const int Commands_ActorType_ActorType_ARRAYSIZE = Commands_ActorType_ActorType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Commands_ActorType_descriptor();
inline const ::std::string& Commands_ActorType_Name(Commands_ActorType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Commands_ActorType_descriptor(), value);
}
inline bool Commands_ActorType_Parse(
    const ::std::string& name, Commands_ActorType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Commands_ActorType>(
    Commands_ActorType_descriptor(), name, value);
}
enum Commands_CommandType {
  Commands_CommandType_MOVE = 1,
  Commands_CommandType_ATTACK = 2,
  Commands_CommandType_TRAIN = 3
};
bool Commands_CommandType_IsValid(int value);
const Commands_CommandType Commands_CommandType_CommandType_MIN = Commands_CommandType_MOVE;
const Commands_CommandType Commands_CommandType_CommandType_MAX = Commands_CommandType_TRAIN;
const int Commands_CommandType_CommandType_ARRAYSIZE = Commands_CommandType_CommandType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Commands_CommandType_descriptor();
inline const ::std::string& Commands_CommandType_Name(Commands_CommandType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Commands_CommandType_descriptor(), value);
}
inline bool Commands_CommandType_Parse(
    const ::std::string& name, Commands_CommandType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Commands_CommandType>(
    Commands_CommandType_descriptor(), name, value);
}
// ===================================================================

class Commands_Move : public ::google::protobuf::Message {
 public:
  Commands_Move();
  virtual ~Commands_Move();

  Commands_Move(const Commands_Move& from);

  inline Commands_Move& operator=(const Commands_Move& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Commands_Move& default_instance();

  void Swap(Commands_Move* other);

  // implements Message ----------------------------------------------

  Commands_Move* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Commands_Move& from);
  void MergeFrom(const Commands_Move& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string withWhat = 1;
  inline bool has_withwhat() const;
  inline void clear_withwhat();
  static const int kWithWhatFieldNumber = 1;
  inline const ::std::string& withwhat() const;
  inline void set_withwhat(const ::std::string& value);
  inline void set_withwhat(const char* value);
  inline void set_withwhat(const char* value, size_t size);
  inline ::std::string* mutable_withwhat();
  inline ::std::string* release_withwhat();
  inline void set_allocated_withwhat(::std::string* withwhat);

  // required .strategy_protocol.Position toPosition = 2;
  inline bool has_toposition() const;
  inline void clear_toposition();
  static const int kToPositionFieldNumber = 2;
  inline const ::strategy_protocol::Position& toposition() const;
  inline ::strategy_protocol::Position* mutable_toposition();
  inline ::strategy_protocol::Position* release_toposition();
  inline void set_allocated_toposition(::strategy_protocol::Position* toposition);

  // @@protoc_insertion_point(class_scope:strategy_protocol.Commands.Move)
 private:
  inline void set_has_withwhat();
  inline void clear_has_withwhat();
  inline void set_has_toposition();
  inline void clear_has_toposition();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* withwhat_;
  ::strategy_protocol::Position* toposition_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Commands_2eproto();
  friend void protobuf_AssignDesc_Commands_2eproto();
  friend void protobuf_ShutdownFile_Commands_2eproto();

  void InitAsDefaultInstance();
  static Commands_Move* default_instance_;
};
// -------------------------------------------------------------------

class Commands_Attack : public ::google::protobuf::Message {
 public:
  Commands_Attack();
  virtual ~Commands_Attack();

  Commands_Attack(const Commands_Attack& from);

  inline Commands_Attack& operator=(const Commands_Attack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Commands_Attack& default_instance();

  void Swap(Commands_Attack* other);

  // implements Message ----------------------------------------------

  Commands_Attack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Commands_Attack& from);
  void MergeFrom(const Commands_Attack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string withWhat = 1;
  inline bool has_withwhat() const;
  inline void clear_withwhat();
  static const int kWithWhatFieldNumber = 1;
  inline const ::std::string& withwhat() const;
  inline void set_withwhat(const ::std::string& value);
  inline void set_withwhat(const char* value);
  inline void set_withwhat(const char* value, size_t size);
  inline ::std::string* mutable_withwhat();
  inline ::std::string* release_withwhat();
  inline void set_allocated_withwhat(::std::string* withwhat);

  // required string what = 2;
  inline bool has_what() const;
  inline void clear_what();
  static const int kWhatFieldNumber = 2;
  inline const ::std::string& what() const;
  inline void set_what(const ::std::string& value);
  inline void set_what(const char* value);
  inline void set_what(const char* value, size_t size);
  inline ::std::string* mutable_what();
  inline ::std::string* release_what();
  inline void set_allocated_what(::std::string* what);

  // @@protoc_insertion_point(class_scope:strategy_protocol.Commands.Attack)
 private:
  inline void set_has_withwhat();
  inline void clear_has_withwhat();
  inline void set_has_what();
  inline void clear_has_what();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* withwhat_;
  ::std::string* what_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Commands_2eproto();
  friend void protobuf_AssignDesc_Commands_2eproto();
  friend void protobuf_ShutdownFile_Commands_2eproto();

  void InitAsDefaultInstance();
  static Commands_Attack* default_instance_;
};
// -------------------------------------------------------------------

class Commands_Train : public ::google::protobuf::Message {
 public:
  Commands_Train();
  virtual ~Commands_Train();

  Commands_Train(const Commands_Train& from);

  inline Commands_Train& operator=(const Commands_Train& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Commands_Train& default_instance();

  void Swap(Commands_Train* other);

  // implements Message ----------------------------------------------

  Commands_Train* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Commands_Train& from);
  void MergeFrom(const Commands_Train& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string withWhat = 1;
  inline bool has_withwhat() const;
  inline void clear_withwhat();
  static const int kWithWhatFieldNumber = 1;
  inline const ::std::string& withwhat() const;
  inline void set_withwhat(const ::std::string& value);
  inline void set_withwhat(const char* value);
  inline void set_withwhat(const char* value, size_t size);
  inline ::std::string* mutable_withwhat();
  inline ::std::string* release_withwhat();
  inline void set_allocated_withwhat(::std::string* withwhat);

  // required .strategy_protocol.Commands.ActorType what = 2;
  inline bool has_what() const;
  inline void clear_what();
  static const int kWhatFieldNumber = 2;
  inline ::strategy_protocol::Commands_ActorType what() const;
  inline void set_what(::strategy_protocol::Commands_ActorType value);

  // @@protoc_insertion_point(class_scope:strategy_protocol.Commands.Train)
 private:
  inline void set_has_withwhat();
  inline void clear_has_withwhat();
  inline void set_has_what();
  inline void clear_has_what();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* withwhat_;
  int what_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Commands_2eproto();
  friend void protobuf_AssignDesc_Commands_2eproto();
  friend void protobuf_ShutdownFile_Commands_2eproto();

  void InitAsDefaultInstance();
  static Commands_Train* default_instance_;
};
// -------------------------------------------------------------------

class Commands_Command : public ::google::protobuf::Message {
 public:
  Commands_Command();
  virtual ~Commands_Command();

  Commands_Command(const Commands_Command& from);

  inline Commands_Command& operator=(const Commands_Command& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Commands_Command& default_instance();

  void Swap(Commands_Command* other);

  // implements Message ----------------------------------------------

  Commands_Command* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Commands_Command& from);
  void MergeFrom(const Commands_Command& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .strategy_protocol.Commands.CommandType commandType = 1;
  inline bool has_commandtype() const;
  inline void clear_commandtype();
  static const int kCommandTypeFieldNumber = 1;
  inline ::strategy_protocol::Commands_CommandType commandtype() const;
  inline void set_commandtype(::strategy_protocol::Commands_CommandType value);

  // optional .strategy_protocol.Commands.Move moveCommand = 2;
  inline bool has_movecommand() const;
  inline void clear_movecommand();
  static const int kMoveCommandFieldNumber = 2;
  inline const ::strategy_protocol::Commands_Move& movecommand() const;
  inline ::strategy_protocol::Commands_Move* mutable_movecommand();
  inline ::strategy_protocol::Commands_Move* release_movecommand();
  inline void set_allocated_movecommand(::strategy_protocol::Commands_Move* movecommand);

  // optional .strategy_protocol.Commands.Attack attackCommand = 3;
  inline bool has_attackcommand() const;
  inline void clear_attackcommand();
  static const int kAttackCommandFieldNumber = 3;
  inline const ::strategy_protocol::Commands_Attack& attackcommand() const;
  inline ::strategy_protocol::Commands_Attack* mutable_attackcommand();
  inline ::strategy_protocol::Commands_Attack* release_attackcommand();
  inline void set_allocated_attackcommand(::strategy_protocol::Commands_Attack* attackcommand);

  // optional .strategy_protocol.Commands.Train trainCommand = 4;
  inline bool has_traincommand() const;
  inline void clear_traincommand();
  static const int kTrainCommandFieldNumber = 4;
  inline const ::strategy_protocol::Commands_Train& traincommand() const;
  inline ::strategy_protocol::Commands_Train* mutable_traincommand();
  inline ::strategy_protocol::Commands_Train* release_traincommand();
  inline void set_allocated_traincommand(::strategy_protocol::Commands_Train* traincommand);

  // @@protoc_insertion_point(class_scope:strategy_protocol.Commands.Command)
 private:
  inline void set_has_commandtype();
  inline void clear_has_commandtype();
  inline void set_has_movecommand();
  inline void clear_has_movecommand();
  inline void set_has_attackcommand();
  inline void clear_has_attackcommand();
  inline void set_has_traincommand();
  inline void clear_has_traincommand();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::strategy_protocol::Commands_Move* movecommand_;
  ::strategy_protocol::Commands_Attack* attackcommand_;
  ::strategy_protocol::Commands_Train* traincommand_;
  int commandtype_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Commands_2eproto();
  friend void protobuf_AssignDesc_Commands_2eproto();
  friend void protobuf_ShutdownFile_Commands_2eproto();

  void InitAsDefaultInstance();
  static Commands_Command* default_instance_;
};
// -------------------------------------------------------------------

class Commands : public ::google::protobuf::Message {
 public:
  Commands();
  virtual ~Commands();

  Commands(const Commands& from);

  inline Commands& operator=(const Commands& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Commands& default_instance();

  void Swap(Commands* other);

  // implements Message ----------------------------------------------

  Commands* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Commands& from);
  void MergeFrom(const Commands& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Commands_Move Move;
  typedef Commands_Attack Attack;
  typedef Commands_Train Train;
  typedef Commands_Command Command;

  typedef Commands_ActorType ActorType;
  static const ActorType SOLDIER = Commands_ActorType_SOLDIER;
  static const ActorType WORKER = Commands_ActorType_WORKER;
  static inline bool ActorType_IsValid(int value) {
    return Commands_ActorType_IsValid(value);
  }
  static const ActorType ActorType_MIN =
    Commands_ActorType_ActorType_MIN;
  static const ActorType ActorType_MAX =
    Commands_ActorType_ActorType_MAX;
  static const int ActorType_ARRAYSIZE =
    Commands_ActorType_ActorType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ActorType_descriptor() {
    return Commands_ActorType_descriptor();
  }
  static inline const ::std::string& ActorType_Name(ActorType value) {
    return Commands_ActorType_Name(value);
  }
  static inline bool ActorType_Parse(const ::std::string& name,
      ActorType* value) {
    return Commands_ActorType_Parse(name, value);
  }

  typedef Commands_CommandType CommandType;
  static const CommandType MOVE = Commands_CommandType_MOVE;
  static const CommandType ATTACK = Commands_CommandType_ATTACK;
  static const CommandType TRAIN = Commands_CommandType_TRAIN;
  static inline bool CommandType_IsValid(int value) {
    return Commands_CommandType_IsValid(value);
  }
  static const CommandType CommandType_MIN =
    Commands_CommandType_CommandType_MIN;
  static const CommandType CommandType_MAX =
    Commands_CommandType_CommandType_MAX;
  static const int CommandType_ARRAYSIZE =
    Commands_CommandType_CommandType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CommandType_descriptor() {
    return Commands_CommandType_descriptor();
  }
  static inline const ::std::string& CommandType_Name(CommandType value) {
    return Commands_CommandType_Name(value);
  }
  static inline bool CommandType_Parse(const ::std::string& name,
      CommandType* value) {
    return Commands_CommandType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .strategy_protocol.Commands.Command commands = 1;
  inline int commands_size() const;
  inline void clear_commands();
  static const int kCommandsFieldNumber = 1;
  inline const ::strategy_protocol::Commands_Command& commands(int index) const;
  inline ::strategy_protocol::Commands_Command* mutable_commands(int index);
  inline ::strategy_protocol::Commands_Command* add_commands();
  inline const ::google::protobuf::RepeatedPtrField< ::strategy_protocol::Commands_Command >&
      commands() const;
  inline ::google::protobuf::RepeatedPtrField< ::strategy_protocol::Commands_Command >*
      mutable_commands();

  // @@protoc_insertion_point(class_scope:strategy_protocol.Commands)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::strategy_protocol::Commands_Command > commands_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Commands_2eproto();
  friend void protobuf_AssignDesc_Commands_2eproto();
  friend void protobuf_ShutdownFile_Commands_2eproto();

  void InitAsDefaultInstance();
  static Commands* default_instance_;
};
// ===================================================================


// ===================================================================

// Commands_Move

// required string withWhat = 1;
inline bool Commands_Move::has_withwhat() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Commands_Move::set_has_withwhat() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Commands_Move::clear_has_withwhat() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Commands_Move::clear_withwhat() {
  if (withwhat_ != &::google::protobuf::internal::kEmptyString) {
    withwhat_->clear();
  }
  clear_has_withwhat();
}
inline const ::std::string& Commands_Move::withwhat() const {
  return *withwhat_;
}
inline void Commands_Move::set_withwhat(const ::std::string& value) {
  set_has_withwhat();
  if (withwhat_ == &::google::protobuf::internal::kEmptyString) {
    withwhat_ = new ::std::string;
  }
  withwhat_->assign(value);
}
inline void Commands_Move::set_withwhat(const char* value) {
  set_has_withwhat();
  if (withwhat_ == &::google::protobuf::internal::kEmptyString) {
    withwhat_ = new ::std::string;
  }
  withwhat_->assign(value);
}
inline void Commands_Move::set_withwhat(const char* value, size_t size) {
  set_has_withwhat();
  if (withwhat_ == &::google::protobuf::internal::kEmptyString) {
    withwhat_ = new ::std::string;
  }
  withwhat_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Commands_Move::mutable_withwhat() {
  set_has_withwhat();
  if (withwhat_ == &::google::protobuf::internal::kEmptyString) {
    withwhat_ = new ::std::string;
  }
  return withwhat_;
}
inline ::std::string* Commands_Move::release_withwhat() {
  clear_has_withwhat();
  if (withwhat_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = withwhat_;
    withwhat_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Commands_Move::set_allocated_withwhat(::std::string* withwhat) {
  if (withwhat_ != &::google::protobuf::internal::kEmptyString) {
    delete withwhat_;
  }
  if (withwhat) {
    set_has_withwhat();
    withwhat_ = withwhat;
  } else {
    clear_has_withwhat();
    withwhat_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required .strategy_protocol.Position toPosition = 2;
inline bool Commands_Move::has_toposition() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Commands_Move::set_has_toposition() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Commands_Move::clear_has_toposition() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Commands_Move::clear_toposition() {
  if (toposition_ != NULL) toposition_->::strategy_protocol::Position::Clear();
  clear_has_toposition();
}
inline const ::strategy_protocol::Position& Commands_Move::toposition() const {
  return toposition_ != NULL ? *toposition_ : *default_instance_->toposition_;
}
inline ::strategy_protocol::Position* Commands_Move::mutable_toposition() {
  set_has_toposition();
  if (toposition_ == NULL) toposition_ = new ::strategy_protocol::Position;
  return toposition_;
}
inline ::strategy_protocol::Position* Commands_Move::release_toposition() {
  clear_has_toposition();
  ::strategy_protocol::Position* temp = toposition_;
  toposition_ = NULL;
  return temp;
}
inline void Commands_Move::set_allocated_toposition(::strategy_protocol::Position* toposition) {
  delete toposition_;
  toposition_ = toposition;
  if (toposition) {
    set_has_toposition();
  } else {
    clear_has_toposition();
  }
}

// -------------------------------------------------------------------

// Commands_Attack

// required string withWhat = 1;
inline bool Commands_Attack::has_withwhat() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Commands_Attack::set_has_withwhat() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Commands_Attack::clear_has_withwhat() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Commands_Attack::clear_withwhat() {
  if (withwhat_ != &::google::protobuf::internal::kEmptyString) {
    withwhat_->clear();
  }
  clear_has_withwhat();
}
inline const ::std::string& Commands_Attack::withwhat() const {
  return *withwhat_;
}
inline void Commands_Attack::set_withwhat(const ::std::string& value) {
  set_has_withwhat();
  if (withwhat_ == &::google::protobuf::internal::kEmptyString) {
    withwhat_ = new ::std::string;
  }
  withwhat_->assign(value);
}
inline void Commands_Attack::set_withwhat(const char* value) {
  set_has_withwhat();
  if (withwhat_ == &::google::protobuf::internal::kEmptyString) {
    withwhat_ = new ::std::string;
  }
  withwhat_->assign(value);
}
inline void Commands_Attack::set_withwhat(const char* value, size_t size) {
  set_has_withwhat();
  if (withwhat_ == &::google::protobuf::internal::kEmptyString) {
    withwhat_ = new ::std::string;
  }
  withwhat_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Commands_Attack::mutable_withwhat() {
  set_has_withwhat();
  if (withwhat_ == &::google::protobuf::internal::kEmptyString) {
    withwhat_ = new ::std::string;
  }
  return withwhat_;
}
inline ::std::string* Commands_Attack::release_withwhat() {
  clear_has_withwhat();
  if (withwhat_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = withwhat_;
    withwhat_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Commands_Attack::set_allocated_withwhat(::std::string* withwhat) {
  if (withwhat_ != &::google::protobuf::internal::kEmptyString) {
    delete withwhat_;
  }
  if (withwhat) {
    set_has_withwhat();
    withwhat_ = withwhat;
  } else {
    clear_has_withwhat();
    withwhat_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string what = 2;
inline bool Commands_Attack::has_what() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Commands_Attack::set_has_what() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Commands_Attack::clear_has_what() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Commands_Attack::clear_what() {
  if (what_ != &::google::protobuf::internal::kEmptyString) {
    what_->clear();
  }
  clear_has_what();
}
inline const ::std::string& Commands_Attack::what() const {
  return *what_;
}
inline void Commands_Attack::set_what(const ::std::string& value) {
  set_has_what();
  if (what_ == &::google::protobuf::internal::kEmptyString) {
    what_ = new ::std::string;
  }
  what_->assign(value);
}
inline void Commands_Attack::set_what(const char* value) {
  set_has_what();
  if (what_ == &::google::protobuf::internal::kEmptyString) {
    what_ = new ::std::string;
  }
  what_->assign(value);
}
inline void Commands_Attack::set_what(const char* value, size_t size) {
  set_has_what();
  if (what_ == &::google::protobuf::internal::kEmptyString) {
    what_ = new ::std::string;
  }
  what_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Commands_Attack::mutable_what() {
  set_has_what();
  if (what_ == &::google::protobuf::internal::kEmptyString) {
    what_ = new ::std::string;
  }
  return what_;
}
inline ::std::string* Commands_Attack::release_what() {
  clear_has_what();
  if (what_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = what_;
    what_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Commands_Attack::set_allocated_what(::std::string* what) {
  if (what_ != &::google::protobuf::internal::kEmptyString) {
    delete what_;
  }
  if (what) {
    set_has_what();
    what_ = what;
  } else {
    clear_has_what();
    what_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Commands_Train

// required string withWhat = 1;
inline bool Commands_Train::has_withwhat() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Commands_Train::set_has_withwhat() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Commands_Train::clear_has_withwhat() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Commands_Train::clear_withwhat() {
  if (withwhat_ != &::google::protobuf::internal::kEmptyString) {
    withwhat_->clear();
  }
  clear_has_withwhat();
}
inline const ::std::string& Commands_Train::withwhat() const {
  return *withwhat_;
}
inline void Commands_Train::set_withwhat(const ::std::string& value) {
  set_has_withwhat();
  if (withwhat_ == &::google::protobuf::internal::kEmptyString) {
    withwhat_ = new ::std::string;
  }
  withwhat_->assign(value);
}
inline void Commands_Train::set_withwhat(const char* value) {
  set_has_withwhat();
  if (withwhat_ == &::google::protobuf::internal::kEmptyString) {
    withwhat_ = new ::std::string;
  }
  withwhat_->assign(value);
}
inline void Commands_Train::set_withwhat(const char* value, size_t size) {
  set_has_withwhat();
  if (withwhat_ == &::google::protobuf::internal::kEmptyString) {
    withwhat_ = new ::std::string;
  }
  withwhat_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Commands_Train::mutable_withwhat() {
  set_has_withwhat();
  if (withwhat_ == &::google::protobuf::internal::kEmptyString) {
    withwhat_ = new ::std::string;
  }
  return withwhat_;
}
inline ::std::string* Commands_Train::release_withwhat() {
  clear_has_withwhat();
  if (withwhat_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = withwhat_;
    withwhat_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Commands_Train::set_allocated_withwhat(::std::string* withwhat) {
  if (withwhat_ != &::google::protobuf::internal::kEmptyString) {
    delete withwhat_;
  }
  if (withwhat) {
    set_has_withwhat();
    withwhat_ = withwhat;
  } else {
    clear_has_withwhat();
    withwhat_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required .strategy_protocol.Commands.ActorType what = 2;
inline bool Commands_Train::has_what() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Commands_Train::set_has_what() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Commands_Train::clear_has_what() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Commands_Train::clear_what() {
  what_ = 0;
  clear_has_what();
}
inline ::strategy_protocol::Commands_ActorType Commands_Train::what() const {
  return static_cast< ::strategy_protocol::Commands_ActorType >(what_);
}
inline void Commands_Train::set_what(::strategy_protocol::Commands_ActorType value) {
  assert(::strategy_protocol::Commands_ActorType_IsValid(value));
  set_has_what();
  what_ = value;
}

// -------------------------------------------------------------------

// Commands_Command

// required .strategy_protocol.Commands.CommandType commandType = 1;
inline bool Commands_Command::has_commandtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Commands_Command::set_has_commandtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Commands_Command::clear_has_commandtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Commands_Command::clear_commandtype() {
  commandtype_ = 1;
  clear_has_commandtype();
}
inline ::strategy_protocol::Commands_CommandType Commands_Command::commandtype() const {
  return static_cast< ::strategy_protocol::Commands_CommandType >(commandtype_);
}
inline void Commands_Command::set_commandtype(::strategy_protocol::Commands_CommandType value) {
  assert(::strategy_protocol::Commands_CommandType_IsValid(value));
  set_has_commandtype();
  commandtype_ = value;
}

// optional .strategy_protocol.Commands.Move moveCommand = 2;
inline bool Commands_Command::has_movecommand() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Commands_Command::set_has_movecommand() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Commands_Command::clear_has_movecommand() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Commands_Command::clear_movecommand() {
  if (movecommand_ != NULL) movecommand_->::strategy_protocol::Commands_Move::Clear();
  clear_has_movecommand();
}
inline const ::strategy_protocol::Commands_Move& Commands_Command::movecommand() const {
  return movecommand_ != NULL ? *movecommand_ : *default_instance_->movecommand_;
}
inline ::strategy_protocol::Commands_Move* Commands_Command::mutable_movecommand() {
  set_has_movecommand();
  if (movecommand_ == NULL) movecommand_ = new ::strategy_protocol::Commands_Move;
  return movecommand_;
}
inline ::strategy_protocol::Commands_Move* Commands_Command::release_movecommand() {
  clear_has_movecommand();
  ::strategy_protocol::Commands_Move* temp = movecommand_;
  movecommand_ = NULL;
  return temp;
}
inline void Commands_Command::set_allocated_movecommand(::strategy_protocol::Commands_Move* movecommand) {
  delete movecommand_;
  movecommand_ = movecommand;
  if (movecommand) {
    set_has_movecommand();
  } else {
    clear_has_movecommand();
  }
}

// optional .strategy_protocol.Commands.Attack attackCommand = 3;
inline bool Commands_Command::has_attackcommand() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Commands_Command::set_has_attackcommand() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Commands_Command::clear_has_attackcommand() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Commands_Command::clear_attackcommand() {
  if (attackcommand_ != NULL) attackcommand_->::strategy_protocol::Commands_Attack::Clear();
  clear_has_attackcommand();
}
inline const ::strategy_protocol::Commands_Attack& Commands_Command::attackcommand() const {
  return attackcommand_ != NULL ? *attackcommand_ : *default_instance_->attackcommand_;
}
inline ::strategy_protocol::Commands_Attack* Commands_Command::mutable_attackcommand() {
  set_has_attackcommand();
  if (attackcommand_ == NULL) attackcommand_ = new ::strategy_protocol::Commands_Attack;
  return attackcommand_;
}
inline ::strategy_protocol::Commands_Attack* Commands_Command::release_attackcommand() {
  clear_has_attackcommand();
  ::strategy_protocol::Commands_Attack* temp = attackcommand_;
  attackcommand_ = NULL;
  return temp;
}
inline void Commands_Command::set_allocated_attackcommand(::strategy_protocol::Commands_Attack* attackcommand) {
  delete attackcommand_;
  attackcommand_ = attackcommand;
  if (attackcommand) {
    set_has_attackcommand();
  } else {
    clear_has_attackcommand();
  }
}

// optional .strategy_protocol.Commands.Train trainCommand = 4;
inline bool Commands_Command::has_traincommand() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Commands_Command::set_has_traincommand() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Commands_Command::clear_has_traincommand() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Commands_Command::clear_traincommand() {
  if (traincommand_ != NULL) traincommand_->::strategy_protocol::Commands_Train::Clear();
  clear_has_traincommand();
}
inline const ::strategy_protocol::Commands_Train& Commands_Command::traincommand() const {
  return traincommand_ != NULL ? *traincommand_ : *default_instance_->traincommand_;
}
inline ::strategy_protocol::Commands_Train* Commands_Command::mutable_traincommand() {
  set_has_traincommand();
  if (traincommand_ == NULL) traincommand_ = new ::strategy_protocol::Commands_Train;
  return traincommand_;
}
inline ::strategy_protocol::Commands_Train* Commands_Command::release_traincommand() {
  clear_has_traincommand();
  ::strategy_protocol::Commands_Train* temp = traincommand_;
  traincommand_ = NULL;
  return temp;
}
inline void Commands_Command::set_allocated_traincommand(::strategy_protocol::Commands_Train* traincommand) {
  delete traincommand_;
  traincommand_ = traincommand;
  if (traincommand) {
    set_has_traincommand();
  } else {
    clear_has_traincommand();
  }
}

// -------------------------------------------------------------------

// Commands

// repeated .strategy_protocol.Commands.Command commands = 1;
inline int Commands::commands_size() const {
  return commands_.size();
}
inline void Commands::clear_commands() {
  commands_.Clear();
}
inline const ::strategy_protocol::Commands_Command& Commands::commands(int index) const {
  return commands_.Get(index);
}
inline ::strategy_protocol::Commands_Command* Commands::mutable_commands(int index) {
  return commands_.Mutable(index);
}
inline ::strategy_protocol::Commands_Command* Commands::add_commands() {
  return commands_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::strategy_protocol::Commands_Command >&
Commands::commands() const {
  return commands_;
}
inline ::google::protobuf::RepeatedPtrField< ::strategy_protocol::Commands_Command >*
Commands::mutable_commands() {
  return &commands_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace strategy_protocol

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::strategy_protocol::Commands_ActorType>() {
  return ::strategy_protocol::Commands_ActorType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::strategy_protocol::Commands_CommandType>() {
  return ::strategy_protocol::Commands_CommandType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Commands_2eproto__INCLUDED
