// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Commands.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Commands.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace strategy_protocol {

namespace {

const ::google::protobuf::Descriptor* Commands_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Commands_reflection_ = NULL;
const ::google::protobuf::Descriptor* Commands_Move_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Commands_Move_reflection_ = NULL;
const ::google::protobuf::Descriptor* Commands_Attack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Commands_Attack_reflection_ = NULL;
const ::google::protobuf::Descriptor* Commands_Train_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Commands_Train_reflection_ = NULL;
const ::google::protobuf::Descriptor* Commands_Command_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Commands_Command_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Commands_ActorType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Commands_CommandType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_Commands_2eproto() {
  protobuf_AddDesc_Commands_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Commands.proto");
  GOOGLE_CHECK(file != NULL);
  Commands_descriptor_ = file->message_type(0);
  static const int Commands_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Commands, commands_),
  };
  Commands_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Commands_descriptor_,
      Commands::default_instance_,
      Commands_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Commands, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Commands, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Commands));
  Commands_Move_descriptor_ = Commands_descriptor_->nested_type(0);
  static const int Commands_Move_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Commands_Move, withwhat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Commands_Move, toposition_),
  };
  Commands_Move_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Commands_Move_descriptor_,
      Commands_Move::default_instance_,
      Commands_Move_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Commands_Move, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Commands_Move, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Commands_Move));
  Commands_Attack_descriptor_ = Commands_descriptor_->nested_type(1);
  static const int Commands_Attack_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Commands_Attack, withwhat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Commands_Attack, what_),
  };
  Commands_Attack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Commands_Attack_descriptor_,
      Commands_Attack::default_instance_,
      Commands_Attack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Commands_Attack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Commands_Attack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Commands_Attack));
  Commands_Train_descriptor_ = Commands_descriptor_->nested_type(2);
  static const int Commands_Train_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Commands_Train, withwhat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Commands_Train, what_),
  };
  Commands_Train_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Commands_Train_descriptor_,
      Commands_Train::default_instance_,
      Commands_Train_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Commands_Train, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Commands_Train, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Commands_Train));
  Commands_Command_descriptor_ = Commands_descriptor_->nested_type(3);
  static const int Commands_Command_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Commands_Command, commandtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Commands_Command, movecommand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Commands_Command, attackcommand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Commands_Command, traincommand_),
  };
  Commands_Command_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Commands_Command_descriptor_,
      Commands_Command::default_instance_,
      Commands_Command_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Commands_Command, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Commands_Command, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Commands_Command));
  Commands_ActorType_descriptor_ = Commands_descriptor_->enum_type(0);
  Commands_CommandType_descriptor_ = Commands_descriptor_->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Commands_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Commands_descriptor_, &Commands::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Commands_Move_descriptor_, &Commands_Move::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Commands_Attack_descriptor_, &Commands_Attack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Commands_Train_descriptor_, &Commands_Train::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Commands_Command_descriptor_, &Commands_Command::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Commands_2eproto() {
  delete Commands::default_instance_;
  delete Commands_reflection_;
  delete Commands_Move::default_instance_;
  delete Commands_Move_reflection_;
  delete Commands_Attack::default_instance_;
  delete Commands_Attack_reflection_;
  delete Commands_Train::default_instance_;
  delete Commands_Train_reflection_;
  delete Commands_Command::default_instance_;
  delete Commands_Command_reflection_;
}

void protobuf_AddDesc_Commands_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::strategy_protocol::protobuf_AddDesc_Common_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016Commands.proto\022\021strategy_protocol\032\014Com"
    "mon.proto\"\321\004\n\010Commands\0225\n\010commands\030\001 \003(\013"
    "2#.strategy_protocol.Commands.Command\032I\n"
    "\004Move\022\020\n\010withWhat\030\001 \002(\t\022/\n\ntoPosition\030\002 "
    "\002(\0132\033.strategy_protocol.Position\032(\n\006Atta"
    "ck\022\020\n\010withWhat\030\001 \002(\t\022\014\n\004what\030\002 \002(\t\032N\n\005Tr"
    "ain\022\020\n\010withWhat\030\001 \002(\t\0223\n\004what\030\002 \002(\0162%.st"
    "rategy_protocol.Commands.ActorType\032\362\001\n\007C"
    "ommand\022<\n\013commandType\030\001 \002(\0162\'.strategy_p"
    "rotocol.Commands.CommandType\0225\n\013moveComm"
    "and\030\002 \001(\0132 .strategy_protocol.Commands.M"
    "ove\0229\n\rattackCommand\030\003 \001(\0132\".strategy_pr"
    "otocol.Commands.Attack\0227\n\014trainCommand\030\004"
    " \001(\0132!.strategy_protocol.Commands.Train\""
    "$\n\tActorType\022\013\n\007SOLDIER\020\000\022\n\n\006WORKER\020\001\".\n"
    "\013CommandType\022\010\n\004MOVE\020\001\022\n\n\006ATTACK\020\002\022\t\n\005TR"
    "AIN\020\003", 645);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Commands.proto", &protobuf_RegisterTypes);
  Commands::default_instance_ = new Commands();
  Commands_Move::default_instance_ = new Commands_Move();
  Commands_Attack::default_instance_ = new Commands_Attack();
  Commands_Train::default_instance_ = new Commands_Train();
  Commands_Command::default_instance_ = new Commands_Command();
  Commands::default_instance_->InitAsDefaultInstance();
  Commands_Move::default_instance_->InitAsDefaultInstance();
  Commands_Attack::default_instance_->InitAsDefaultInstance();
  Commands_Train::default_instance_->InitAsDefaultInstance();
  Commands_Command::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Commands_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Commands_2eproto {
  StaticDescriptorInitializer_Commands_2eproto() {
    protobuf_AddDesc_Commands_2eproto();
  }
} static_descriptor_initializer_Commands_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* Commands_ActorType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Commands_ActorType_descriptor_;
}
bool Commands_ActorType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Commands_ActorType Commands::SOLDIER;
const Commands_ActorType Commands::WORKER;
const Commands_ActorType Commands::ActorType_MIN;
const Commands_ActorType Commands::ActorType_MAX;
const int Commands::ActorType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* Commands_CommandType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Commands_CommandType_descriptor_;
}
bool Commands_CommandType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Commands_CommandType Commands::MOVE;
const Commands_CommandType Commands::ATTACK;
const Commands_CommandType Commands::TRAIN;
const Commands_CommandType Commands::CommandType_MIN;
const Commands_CommandType Commands::CommandType_MAX;
const int Commands::CommandType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Commands_Move::kWithWhatFieldNumber;
const int Commands_Move::kToPositionFieldNumber;
#endif  // !_MSC_VER

Commands_Move::Commands_Move()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Commands_Move::InitAsDefaultInstance() {
  toposition_ = const_cast< ::strategy_protocol::Position*>(&::strategy_protocol::Position::default_instance());
}

Commands_Move::Commands_Move(const Commands_Move& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Commands_Move::SharedCtor() {
  _cached_size_ = 0;
  withwhat_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  toposition_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Commands_Move::~Commands_Move() {
  SharedDtor();
}

void Commands_Move::SharedDtor() {
  if (withwhat_ != &::google::protobuf::internal::kEmptyString) {
    delete withwhat_;
  }
  if (this != default_instance_) {
    delete toposition_;
  }
}

void Commands_Move::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Commands_Move::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Commands_Move_descriptor_;
}

const Commands_Move& Commands_Move::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Commands_2eproto();
  return *default_instance_;
}

Commands_Move* Commands_Move::default_instance_ = NULL;

Commands_Move* Commands_Move::New() const {
  return new Commands_Move;
}

void Commands_Move::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_withwhat()) {
      if (withwhat_ != &::google::protobuf::internal::kEmptyString) {
        withwhat_->clear();
      }
    }
    if (has_toposition()) {
      if (toposition_ != NULL) toposition_->::strategy_protocol::Position::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Commands_Move::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string withWhat = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_withwhat()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->withwhat().data(), this->withwhat().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_toPosition;
        break;
      }

      // required .strategy_protocol.Position toPosition = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_toPosition:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_toposition()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Commands_Move::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string withWhat = 1;
  if (has_withwhat()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->withwhat().data(), this->withwhat().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->withwhat(), output);
  }

  // required .strategy_protocol.Position toPosition = 2;
  if (has_toposition()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->toposition(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Commands_Move::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string withWhat = 1;
  if (has_withwhat()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->withwhat().data(), this->withwhat().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->withwhat(), target);
  }

  // required .strategy_protocol.Position toPosition = 2;
  if (has_toposition()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->toposition(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Commands_Move::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string withWhat = 1;
    if (has_withwhat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->withwhat());
    }

    // required .strategy_protocol.Position toPosition = 2;
    if (has_toposition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->toposition());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Commands_Move::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Commands_Move* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Commands_Move*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Commands_Move::MergeFrom(const Commands_Move& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_withwhat()) {
      set_withwhat(from.withwhat());
    }
    if (from.has_toposition()) {
      mutable_toposition()->::strategy_protocol::Position::MergeFrom(from.toposition());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Commands_Move::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Commands_Move::CopyFrom(const Commands_Move& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Commands_Move::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_toposition()) {
    if (!this->toposition().IsInitialized()) return false;
  }
  return true;
}

void Commands_Move::Swap(Commands_Move* other) {
  if (other != this) {
    std::swap(withwhat_, other->withwhat_);
    std::swap(toposition_, other->toposition_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Commands_Move::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Commands_Move_descriptor_;
  metadata.reflection = Commands_Move_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Commands_Attack::kWithWhatFieldNumber;
const int Commands_Attack::kWhatFieldNumber;
#endif  // !_MSC_VER

Commands_Attack::Commands_Attack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Commands_Attack::InitAsDefaultInstance() {
}

Commands_Attack::Commands_Attack(const Commands_Attack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Commands_Attack::SharedCtor() {
  _cached_size_ = 0;
  withwhat_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  what_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Commands_Attack::~Commands_Attack() {
  SharedDtor();
}

void Commands_Attack::SharedDtor() {
  if (withwhat_ != &::google::protobuf::internal::kEmptyString) {
    delete withwhat_;
  }
  if (what_ != &::google::protobuf::internal::kEmptyString) {
    delete what_;
  }
  if (this != default_instance_) {
  }
}

void Commands_Attack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Commands_Attack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Commands_Attack_descriptor_;
}

const Commands_Attack& Commands_Attack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Commands_2eproto();
  return *default_instance_;
}

Commands_Attack* Commands_Attack::default_instance_ = NULL;

Commands_Attack* Commands_Attack::New() const {
  return new Commands_Attack;
}

void Commands_Attack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_withwhat()) {
      if (withwhat_ != &::google::protobuf::internal::kEmptyString) {
        withwhat_->clear();
      }
    }
    if (has_what()) {
      if (what_ != &::google::protobuf::internal::kEmptyString) {
        what_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Commands_Attack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string withWhat = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_withwhat()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->withwhat().data(), this->withwhat().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_what;
        break;
      }

      // required string what = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_what:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_what()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->what().data(), this->what().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Commands_Attack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string withWhat = 1;
  if (has_withwhat()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->withwhat().data(), this->withwhat().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->withwhat(), output);
  }

  // required string what = 2;
  if (has_what()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->what().data(), this->what().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->what(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Commands_Attack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string withWhat = 1;
  if (has_withwhat()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->withwhat().data(), this->withwhat().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->withwhat(), target);
  }

  // required string what = 2;
  if (has_what()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->what().data(), this->what().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->what(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Commands_Attack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string withWhat = 1;
    if (has_withwhat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->withwhat());
    }

    // required string what = 2;
    if (has_what()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->what());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Commands_Attack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Commands_Attack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Commands_Attack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Commands_Attack::MergeFrom(const Commands_Attack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_withwhat()) {
      set_withwhat(from.withwhat());
    }
    if (from.has_what()) {
      set_what(from.what());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Commands_Attack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Commands_Attack::CopyFrom(const Commands_Attack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Commands_Attack::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Commands_Attack::Swap(Commands_Attack* other) {
  if (other != this) {
    std::swap(withwhat_, other->withwhat_);
    std::swap(what_, other->what_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Commands_Attack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Commands_Attack_descriptor_;
  metadata.reflection = Commands_Attack_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Commands_Train::kWithWhatFieldNumber;
const int Commands_Train::kWhatFieldNumber;
#endif  // !_MSC_VER

Commands_Train::Commands_Train()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Commands_Train::InitAsDefaultInstance() {
}

Commands_Train::Commands_Train(const Commands_Train& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Commands_Train::SharedCtor() {
  _cached_size_ = 0;
  withwhat_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  what_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Commands_Train::~Commands_Train() {
  SharedDtor();
}

void Commands_Train::SharedDtor() {
  if (withwhat_ != &::google::protobuf::internal::kEmptyString) {
    delete withwhat_;
  }
  if (this != default_instance_) {
  }
}

void Commands_Train::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Commands_Train::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Commands_Train_descriptor_;
}

const Commands_Train& Commands_Train::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Commands_2eproto();
  return *default_instance_;
}

Commands_Train* Commands_Train::default_instance_ = NULL;

Commands_Train* Commands_Train::New() const {
  return new Commands_Train;
}

void Commands_Train::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_withwhat()) {
      if (withwhat_ != &::google::protobuf::internal::kEmptyString) {
        withwhat_->clear();
      }
    }
    what_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Commands_Train::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string withWhat = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_withwhat()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->withwhat().data(), this->withwhat().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_what;
        break;
      }

      // required .strategy_protocol.Commands.ActorType what = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_what:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::strategy_protocol::Commands_ActorType_IsValid(value)) {
            set_what(static_cast< ::strategy_protocol::Commands_ActorType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Commands_Train::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string withWhat = 1;
  if (has_withwhat()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->withwhat().data(), this->withwhat().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->withwhat(), output);
  }

  // required .strategy_protocol.Commands.ActorType what = 2;
  if (has_what()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->what(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Commands_Train::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string withWhat = 1;
  if (has_withwhat()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->withwhat().data(), this->withwhat().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->withwhat(), target);
  }

  // required .strategy_protocol.Commands.ActorType what = 2;
  if (has_what()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->what(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Commands_Train::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string withWhat = 1;
    if (has_withwhat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->withwhat());
    }

    // required .strategy_protocol.Commands.ActorType what = 2;
    if (has_what()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->what());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Commands_Train::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Commands_Train* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Commands_Train*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Commands_Train::MergeFrom(const Commands_Train& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_withwhat()) {
      set_withwhat(from.withwhat());
    }
    if (from.has_what()) {
      set_what(from.what());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Commands_Train::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Commands_Train::CopyFrom(const Commands_Train& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Commands_Train::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Commands_Train::Swap(Commands_Train* other) {
  if (other != this) {
    std::swap(withwhat_, other->withwhat_);
    std::swap(what_, other->what_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Commands_Train::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Commands_Train_descriptor_;
  metadata.reflection = Commands_Train_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Commands_Command::kCommandTypeFieldNumber;
const int Commands_Command::kMoveCommandFieldNumber;
const int Commands_Command::kAttackCommandFieldNumber;
const int Commands_Command::kTrainCommandFieldNumber;
#endif  // !_MSC_VER

Commands_Command::Commands_Command()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Commands_Command::InitAsDefaultInstance() {
  movecommand_ = const_cast< ::strategy_protocol::Commands_Move*>(&::strategy_protocol::Commands_Move::default_instance());
  attackcommand_ = const_cast< ::strategy_protocol::Commands_Attack*>(&::strategy_protocol::Commands_Attack::default_instance());
  traincommand_ = const_cast< ::strategy_protocol::Commands_Train*>(&::strategy_protocol::Commands_Train::default_instance());
}

Commands_Command::Commands_Command(const Commands_Command& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Commands_Command::SharedCtor() {
  _cached_size_ = 0;
  commandtype_ = 1;
  movecommand_ = NULL;
  attackcommand_ = NULL;
  traincommand_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Commands_Command::~Commands_Command() {
  SharedDtor();
}

void Commands_Command::SharedDtor() {
  if (this != default_instance_) {
    delete movecommand_;
    delete attackcommand_;
    delete traincommand_;
  }
}

void Commands_Command::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Commands_Command::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Commands_Command_descriptor_;
}

const Commands_Command& Commands_Command::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Commands_2eproto();
  return *default_instance_;
}

Commands_Command* Commands_Command::default_instance_ = NULL;

Commands_Command* Commands_Command::New() const {
  return new Commands_Command;
}

void Commands_Command::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    commandtype_ = 1;
    if (has_movecommand()) {
      if (movecommand_ != NULL) movecommand_->::strategy_protocol::Commands_Move::Clear();
    }
    if (has_attackcommand()) {
      if (attackcommand_ != NULL) attackcommand_->::strategy_protocol::Commands_Attack::Clear();
    }
    if (has_traincommand()) {
      if (traincommand_ != NULL) traincommand_->::strategy_protocol::Commands_Train::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Commands_Command::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .strategy_protocol.Commands.CommandType commandType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::strategy_protocol::Commands_CommandType_IsValid(value)) {
            set_commandtype(static_cast< ::strategy_protocol::Commands_CommandType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_moveCommand;
        break;
      }

      // optional .strategy_protocol.Commands.Move moveCommand = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_moveCommand:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_movecommand()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_attackCommand;
        break;
      }

      // optional .strategy_protocol.Commands.Attack attackCommand = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attackCommand:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_attackcommand()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_trainCommand;
        break;
      }

      // optional .strategy_protocol.Commands.Train trainCommand = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_trainCommand:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_traincommand()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Commands_Command::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .strategy_protocol.Commands.CommandType commandType = 1;
  if (has_commandtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->commandtype(), output);
  }

  // optional .strategy_protocol.Commands.Move moveCommand = 2;
  if (has_movecommand()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->movecommand(), output);
  }

  // optional .strategy_protocol.Commands.Attack attackCommand = 3;
  if (has_attackcommand()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->attackcommand(), output);
  }

  // optional .strategy_protocol.Commands.Train trainCommand = 4;
  if (has_traincommand()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->traincommand(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Commands_Command::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .strategy_protocol.Commands.CommandType commandType = 1;
  if (has_commandtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->commandtype(), target);
  }

  // optional .strategy_protocol.Commands.Move moveCommand = 2;
  if (has_movecommand()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->movecommand(), target);
  }

  // optional .strategy_protocol.Commands.Attack attackCommand = 3;
  if (has_attackcommand()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->attackcommand(), target);
  }

  // optional .strategy_protocol.Commands.Train trainCommand = 4;
  if (has_traincommand()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->traincommand(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Commands_Command::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .strategy_protocol.Commands.CommandType commandType = 1;
    if (has_commandtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->commandtype());
    }

    // optional .strategy_protocol.Commands.Move moveCommand = 2;
    if (has_movecommand()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->movecommand());
    }

    // optional .strategy_protocol.Commands.Attack attackCommand = 3;
    if (has_attackcommand()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->attackcommand());
    }

    // optional .strategy_protocol.Commands.Train trainCommand = 4;
    if (has_traincommand()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->traincommand());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Commands_Command::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Commands_Command* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Commands_Command*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Commands_Command::MergeFrom(const Commands_Command& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_commandtype()) {
      set_commandtype(from.commandtype());
    }
    if (from.has_movecommand()) {
      mutable_movecommand()->::strategy_protocol::Commands_Move::MergeFrom(from.movecommand());
    }
    if (from.has_attackcommand()) {
      mutable_attackcommand()->::strategy_protocol::Commands_Attack::MergeFrom(from.attackcommand());
    }
    if (from.has_traincommand()) {
      mutable_traincommand()->::strategy_protocol::Commands_Train::MergeFrom(from.traincommand());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Commands_Command::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Commands_Command::CopyFrom(const Commands_Command& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Commands_Command::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_movecommand()) {
    if (!this->movecommand().IsInitialized()) return false;
  }
  if (has_attackcommand()) {
    if (!this->attackcommand().IsInitialized()) return false;
  }
  if (has_traincommand()) {
    if (!this->traincommand().IsInitialized()) return false;
  }
  return true;
}

void Commands_Command::Swap(Commands_Command* other) {
  if (other != this) {
    std::swap(commandtype_, other->commandtype_);
    std::swap(movecommand_, other->movecommand_);
    std::swap(attackcommand_, other->attackcommand_);
    std::swap(traincommand_, other->traincommand_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Commands_Command::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Commands_Command_descriptor_;
  metadata.reflection = Commands_Command_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Commands::kCommandsFieldNumber;
#endif  // !_MSC_VER

Commands::Commands()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Commands::InitAsDefaultInstance() {
}

Commands::Commands(const Commands& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Commands::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Commands::~Commands() {
  SharedDtor();
}

void Commands::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Commands::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Commands::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Commands_descriptor_;
}

const Commands& Commands::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Commands_2eproto();
  return *default_instance_;
}

Commands* Commands::default_instance_ = NULL;

Commands* Commands::New() const {
  return new Commands;
}

void Commands::Clear() {
  commands_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Commands::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .strategy_protocol.Commands.Command commands = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_commands:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_commands()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_commands;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Commands::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .strategy_protocol.Commands.Command commands = 1;
  for (int i = 0; i < this->commands_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->commands(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Commands::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .strategy_protocol.Commands.Command commands = 1;
  for (int i = 0; i < this->commands_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->commands(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Commands::ByteSize() const {
  int total_size = 0;

  // repeated .strategy_protocol.Commands.Command commands = 1;
  total_size += 1 * this->commands_size();
  for (int i = 0; i < this->commands_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->commands(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Commands::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Commands* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Commands*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Commands::MergeFrom(const Commands& from) {
  GOOGLE_CHECK_NE(&from, this);
  commands_.MergeFrom(from.commands_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Commands::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Commands::CopyFrom(const Commands& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Commands::IsInitialized() const {

  for (int i = 0; i < commands_size(); i++) {
    if (!this->commands(i).IsInitialized()) return false;
  }
  return true;
}

void Commands::Swap(Commands* other) {
  if (other != this) {
    commands_.Swap(&other->commands_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Commands::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Commands_descriptor_;
  metadata.reflection = Commands_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace strategy_protocol

// @@protoc_insertion_point(global_scope)
